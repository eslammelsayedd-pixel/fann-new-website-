name: SEO Enhancement Agent

# Run on pull requests, push to main, and scheduled daily
on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight UTC
  workflow_dispatch:  # Allow manual trigger

jobs:
  seo-scan:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          npm ci
          npm install -g lighthouse
          npm install puppeteer cheerio node-html-parser zod openai @google/generative-ai
          
      - name: Build project
        run: npm run build
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          
      - name: Run Lighthouse SEO audit
        run: |
          mkdir -p reports
          lighthouse https://fann-new-website.vercel.app --output=json --output-path=reports/lighthouse.json --only-categories=seo,performance,accessibility,best-practices
          
      - name: Analyze HTML structure for SEO
        run: |
          node << 'EOF'
          const fs = require('fs');
          const { parse } = require('node-html-parser');
          
          // Read built HTML files
          const htmlFiles = fs.readdirSync('dist', { recursive: true })
            .filter(file => file.endsWith('.html'));
          
          const seoIssues = [];
          
          htmlFiles.forEach(file => {
            const content = fs.readFileSync(`dist/${file}`, 'utf-8');
            const root = parse(content);
            
            // Check for SEO essentials
            const issues = {
              file: file,
              missingTitle: !root.querySelector('title'),
              missingMetaDescription: !root.querySelector('meta[name="description"]'),
              missingMetaViewport: !root.querySelector('meta[name="viewport"]'),
              missingCanonical: !root.querySelector('link[rel="canonical"]'),
              missingOgTags: !root.querySelector('meta[property^="og:"]'),
              missingH1: !root.querySelector('h1'),
              imagesWithoutAlt: root.querySelectorAll('img:not([alt])').length,
              emptyAltTexts: root.querySelectorAll('img[alt=""]').length
            };
            
            if (Object.values(issues).some(v => v === true || v > 0)) {
              seoIssues.push(issues);
            }
          });
          
          fs.writeFileSync('reports/seo-issues.json', JSON.stringify(seoIssues, null, 2));
          console.log('SEO analysis complete. Issues found:', seoIssues.length);
          EOF
          
      - name: Generate AI-powered SEO recommendations
        run: |
          node << 'EOF'
          const fs = require('fs');
          const { GoogleGenerativeAI } = require('@google/generative-ai');
          
          async function generateRecommendations() {
            const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
            const model = genAI.getGenerativeModel({ model: 'gemini-pro' });
            
            // Read SEO issues
            const seoIssues = JSON.parse(fs.readFileSync('reports/seo-issues.json', 'utf-8'));
            const lighthouseData = JSON.parse(fs.readFileSync('reports/lighthouse.json', 'utf-8'));
            
            const prompt = `You are an expert SEO consultant. Analyze these SEO issues and provide actionable recommendations:

SEO Issues Found:
${JSON.stringify(seoIssues, null, 2)}

Lighthouse SEO Score: ${lighthouseData.categories.seo.score * 100}

Provide:
1. Priority ranking of issues (high/medium/low)
2. Specific code changes to fix each issue
3. Expected impact on SEO
4. Implementation steps

Format as JSON with structure: { recommendations: [{priority, issue, fix, impact, steps}] }`;
            
            const result = await model.generateContent(prompt);
            const response = await result.response;
            const recommendations = response.text();
            
            fs.writeFileSync('reports/ai-recommendations.json', recommendations);
            console.log('AI recommendations generated successfully');
          }
          
          generateRecommendations().catch(console.error);
          EOF
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          
      - name: Create SEO report
        run: |
          node << 'EOF'
          const fs = require('fs');
          
          const seoIssues = JSON.parse(fs.readFileSync('reports/seo-issues.json', 'utf-8'));
          const lighthouseData = JSON.parse(fs.readFileSync('reports/lighthouse.json', 'utf-8'));
          
          let report = '# SEO Enhancement Report\n\n';
          report += `Generated: ${new Date().toISOString()}\n\n`;
          report += `## Lighthouse Scores\n\n`;
          report += `- SEO: ${(lighthouseData.categories.seo.score * 100).toFixed(0)}/100\n`;
          report += `- Performance: ${(lighthouseData.categories.performance.score * 100).toFixed(0)}/100\n`;
          report += `- Accessibility: ${(lighthouseData.categories.accessibility.score * 100).toFixed(0)}/100\n`;
          report += `- Best Practices: ${(lighthouseData.categories['best-practices'].score * 100).toFixed(0)}/100\n\n`;
          
          report += `## SEO Issues Found: ${seoIssues.length}\n\n`;
          
          seoIssues.forEach((issue, i) => {
            report += `### ${i + 1}. ${issue.file}\n\n`;
            if (issue.missingTitle) report += '- ⚠️ Missing title tag\n';
            if (issue.missingMetaDescription) report += '- ⚠️ Missing meta description\n';
            if (issue.missingMetaViewport) report += '- ⚠️ Missing viewport meta tag\n';
            if (issue.missingCanonical) report += '- ⚠️ Missing canonical link\n';
            if (issue.missingOgTags) report += '- ⚠️ Missing Open Graph tags\n';
            if (issue.missingH1) report += '- ⚠️ Missing H1 heading\n';
            if (issue.imagesWithoutAlt > 0) report += `- ⚠️ ${issue.imagesWithoutAlt} images without alt text\n`;
            report += '\n';
          });
          
          report += `## AI Recommendations\n\n`;
          report += fs.readFileSync('reports/ai-recommendations.json', 'utf-8');
          
          fs.writeFileSync('reports/SEO-REPORT.md', report);
          console.log('SEO report generated: reports/SEO-REPORT.md');
          EOF
          
      - name: Upload SEO reports as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: seo-reports
          path: reports/
          retention-days: 30
          
      - name: Comment PR with SEO report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('reports/SEO-REPORT.md', 'utf-8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
            
      - name: Check for SEO failures
        run: |
          node << 'EOF'
          const fs = require('fs');
          const lighthouseData = JSON.parse(fs.readFileSync('reports/lighthouse.json', 'utf-8'));
          const seoScore = lighthouseData.categories.seo.score * 100;
          
          console.log(`SEO Score: ${seoScore}`);
          
          if (seoScore < 80) {
            console.error('❌ SEO score is below 80. Please address the issues above.');
            process.exit(1);
          } else {
            console.log('✅ SEO score is acceptable.');
          }
          EOF
